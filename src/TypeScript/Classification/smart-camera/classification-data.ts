/*
 * Copyright 2023 Sony Semiconductor Solutions Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { GeneralClassification } from '../smart-camera/general-classification';


export class ClassificationData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClassificationData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClassificationData(bb:flatbuffers.ByteBuffer, obj?:ClassificationData):ClassificationData {
  return (obj || new ClassificationData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClassificationData(bb:flatbuffers.ByteBuffer, obj?:ClassificationData):ClassificationData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClassificationData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

classificationList(index: number, obj?:GeneralClassification):GeneralClassification|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new GeneralClassification()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

classificationListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startClassificationData(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addClassificationList(builder:flatbuffers.Builder, classificationListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, classificationListOffset, 0);
}

static createClassificationListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startClassificationListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endClassificationData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createClassificationData(builder:flatbuffers.Builder, classificationListOffset:flatbuffers.Offset):flatbuffers.Offset {
  ClassificationData.startClassificationData(builder);
  ClassificationData.addClassificationList(builder, classificationListOffset);
  return ClassificationData.endClassificationData(builder);
}
}

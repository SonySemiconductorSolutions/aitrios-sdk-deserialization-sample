/*
 * Copyright 2023 Sony Semiconductor Solutions Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class GeneralClassification {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GeneralClassification {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGeneralClassification(bb:flatbuffers.ByteBuffer, obj?:GeneralClassification):GeneralClassification {
  return (obj || new GeneralClassification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGeneralClassification(bb:flatbuffers.ByteBuffer, obj?:GeneralClassification):GeneralClassification {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GeneralClassification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

classId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startGeneralClassification(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addClassId(builder:flatbuffers.Builder, classId:number) {
  builder.addFieldInt32(0, classId, 0);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldFloat32(1, score, 0.0);
}

static endGeneralClassification(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGeneralClassification(builder:flatbuffers.Builder, classId:number, score:number):flatbuffers.Offset {
  GeneralClassification.startGeneralClassification(builder);
  GeneralClassification.addClassId(builder, classId);
  GeneralClassification.addScore(builder, score);
  return GeneralClassification.endGeneralClassification(builder);
}
}

/*
 * Copyright 2023 Sony Semiconductor Solutions Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class SemanticSegmentationData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SemanticSegmentationData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSemanticSegmentationData(bb:flatbuffers.ByteBuffer, obj?:SemanticSegmentationData):SemanticSegmentationData {
  return (obj || new SemanticSegmentationData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSemanticSegmentationData(bb:flatbuffers.ByteBuffer, obj?:SemanticSegmentationData):SemanticSegmentationData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SemanticSegmentationData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

classIdMap(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

classIdMapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

classIdMapArray():Uint16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

numClassId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

scoreMap(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

scoreMapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

scoreMapArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startSemanticSegmentationData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldInt16(0, height, 0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldInt16(1, width, 0);
}

static addClassIdMap(builder:flatbuffers.Builder, classIdMapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classIdMapOffset, 0);
}

static createClassIdMapVector(builder:flatbuffers.Builder, data:number[]|Uint16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createClassIdMapVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createClassIdMapVector(builder:flatbuffers.Builder, data:number[]|Uint16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startClassIdMapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static addNumClassId(builder:flatbuffers.Builder, numClassId:number) {
  builder.addFieldInt16(3, numClassId, 0);
}

static addScoreMap(builder:flatbuffers.Builder, scoreMapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, scoreMapOffset, 0);
}

static createScoreMapVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createScoreMapVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createScoreMapVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startScoreMapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSemanticSegmentationData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSemanticSegmentationData(builder:flatbuffers.Builder, height:number, width:number, classIdMapOffset:flatbuffers.Offset, numClassId:number, scoreMapOffset:flatbuffers.Offset):flatbuffers.Offset {
  SemanticSegmentationData.startSemanticSegmentationData(builder);
  SemanticSegmentationData.addHeight(builder, height);
  SemanticSegmentationData.addWidth(builder, width);
  SemanticSegmentationData.addClassIdMap(builder, classIdMapOffset);
  SemanticSegmentationData.addNumClassId(builder, numClassId);
  SemanticSegmentationData.addScoreMap(builder, scoreMapOffset);
  return SemanticSegmentationData.endSemanticSegmentationData(builder);
}
}
